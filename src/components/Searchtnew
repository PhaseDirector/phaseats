import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import { TextField, Button, Table, TableHead, TableRow, TableCell, TableBody, Checkbox, Dialog, Box, DialogTitle, DialogContent, DialogActions, Snackbar, Alert } from '@mui/material';
import { makeStyles } from '@mui/styles';

const useStyles = makeStyles((theme) => ({
  // Styles definition here...
}));

const SearchTab = () => {
  const classes = useStyles();
  const [searchQuery, setSearchQuery] = useState('');
  const [candidates, setCandidates] = useState([]);
  const [jobs, setJobs] = useState([]);
  const [clients, setClients] = useState([]);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [selectedClients, setSelectedClients] = useState([]);
  const [selectedJobs, setSelectedJobs] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const response = await axios.get('http://localhost:8000/api/candidates');
        setCandidates(response.data);
      } catch (error) {
        console.error('Error fetching candidates:', error);
      }
    };

    fetchCandidates();
  }, []);

  useEffect(() => {
    const fetchClients = async () => {
      try {
        const response = await axios.get('http://localhost:8000/api/clients');
        setClients(response.data);
      } catch (error) {
        console.error('Error fetching clients:', error);
      }
    };

    fetchClients();
  }, []);

  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const response = await axios.get('http://localhost:8000/api/jobs');
        setJobs(response.data);
      } catch (error) {
        console.error('Error fetching jobs:', error);
      }
    };

    fetchJobs();
  }, []);

  const handleSearchQueryChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);
  };

  const handleClearSearch = () => {
    setSearchQuery('');
  };

  const handleCandidateSelection = (candidate_id) => {
    setSelectedCandidates((prevSelectedCandidates) => {
      if (prevSelectedCandidates.includes(candidate_id)) {
        return prevSelectedCandidates.filter((id) => id !== candidate_id);
      } else {
        return [...prevSelectedCandidates, candidate_id];
      }
    });
  };

  const handleDeleteCandidates = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete the selected candidates?');
    if (!confirmDelete) {
      return;
    }

    try {
      await Promise.all(
        selectedCandidates.map(async (candidateId) => {
          await axios.delete(`http://localhost:8000/api/candidates/${candidateId}`);
        })
      );

      const response = await axios.get('http://localhost:8000/api/candidates');
      setCandidates(response.data);
      setSelectedCandidates([]);
      setSnackbarMessage('Selected candidates deleted successfully.');
      setOpenSnackbar(true);
    } catch (error) {
      console.error('Error deleting candidates:', error);
      setSnackbarMessage('Error deleting candidates. Please try again.');
      setOpenSnackbar(true);
    }
  };

  const handleDeleteClients = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete the selected clients?');
    if (!confirmDelete) {
      return;
    }

    try {
      await Promise.all(
        selectedClients.map(async (client) => {
          await axios.delete(`http://localhost:8000/api/clients/${client.client_id}`);
        })
      );

      const response = await axios.get('http://localhost:8000/api/clients');
      setClients(response.data);
      setSelectedClients([]);
      setSnackbarMessage('Selected clients deleted successfully.');
      setOpenSnackbar(true);
    } catch (error) {
      console.error('Error deleting clients:', error);
      setSnackbarMessage('Error deleting clients. Please try again.');
      setOpenSnackbar(true);
    }
  };

  const handleSelectAllClients = () => {
    setSelectedClients(selectedClients.length === clients.length ? [] : clients);
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
  };

  const handleSnackbarClose = () => {
    setOpenSnackbar(false);
  };

  const handleSelectClient = (client_id) => {
    setSelectedClients((prevSelectedClients) => {
      if (prevSelectedClients.includes(client_id)) {
        return prevSelectedClients.filter((id) => id !== client_id);
      } else {
        return [...prevSelectedClients, client_id];
      }
    });
  };

  const handleJobSelection = (jobId) => {
    setSelectedJobs((prevSelectedJobs) => {
      if (prevSelectedJobs.includes(jobId)) {
        return prevSelectedJobs.filter((id) => id !== jobId);
      } else {
        return [...prevSelectedJobs, jobId];
      }
    });
  };

  const handleDeleteJobs = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete the selected jobs?');
    if (!confirmDelete) {
      return;
    }

    try {
      await Promise.all(
        selectedJobs.map(async (jobId) => {
          await axios.delete(`http://localhost:8000/api/jobs/${jobId}`);
        })
      );

      const response = await axios.get('http://localhost:8000/api/jobs');
      setJobs(response.data);
      setSelectedJobs([]);
      setOpenSnackbar(true);
    } catch (error) {
      console.error('Error deleting jobs:', error);
    }
  };

  const filteredJobs = jobs.filter((job) => {
    const { job_title, description, location, requirements } = job;
    const lowerCaseQuery = searchQuery.toLowerCase();

    return (
      job_title.toLowerCase().includes(lowerCaseQuery) ||
      description.toLowerCase().includes(lowerCaseQuery) ||
      location.toLowerCase().includes(lowerCaseQuery) ||
      requirements.toLowerCase().includes(lowerCaseQuery)
    );
  });

  const filteredClients = clients.filter(
    // ... (client filter logic)
  );

  const filteredCandidates = candidates.filter(
    // ... (candidate filter logic)
  );

  return (
    <div className={classes.root}>
      <h1>Search</h1>
      {/* ... (search bar and buttons) */}
      <Table className={classes.table}>
        <TableHead>
          <TableRow>
            {/* ... (table header cells) */}
          </TableRow>
        </TableHead>
        <TableBody>
          {filteredClients.map((client) => (
            {/* ... (client table rows) */}
          ))}
        </TableBody>
      </Table>
      <Dialog open={openDialog} onClose={handleDialogClose}>
        {/* ... (dialog content) */}
      </Dialog>
      <Snackbar open={openSnackbar} autoHideDuration={5000} onClose={handleSnackbarClose}>
        <Alert onClose={handleSnackbarClose} severity="success" sx={{ width: '100%' }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </div>
   
    <h3>Candidates</h3>
    <Button
      variant="outlined"
      component={Link}
      to="/createcandidate"
      className={classes.addButton}
      sx={{ width: '200px', marginRight: '1rem', marginLeft: '1rem' }}
    >
      Add Candidate
    </Button>
    {/* ... (other buttons) */}
    <Button
      variant="contained"
      onClick={handleDeleteCandidates}
      className={classes.addButton}
      disabled={selectedCandidates.length === 0}
    >
      Delete Selected Candidates
    </Button>
    {/* ... (candidates table) */}
    <h3>Jobs</h3>
    {/* ... (job buttons) */}
    <Table className={classes.table}>
      <TableHead>
        {/* ... (job table headers) */}
      </TableHead>
      <TableBody>
        {filteredJobs.map((job) => (
          {/* ... (job table rows) */}
        ))}
      </TableBody>
    </Table>
    
    <h3>Clients</h3>
    {/* ... (client buttons) */}
    <Table className={classes.table}>
      <TableHead>
        {/* ... (client table headers) */}
      </TableHead>
      <TableBody>
        {filteredClients.map((client) => (
          {/* ... (client table rows) */}
        ))}
      </TableBody>
    </Table>
    {/* ... (snackbar for jobs) */}
  </div>
);
};

export default SearchTab;
